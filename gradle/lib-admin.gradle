import org.codehaus.groovy.runtime.MethodClosure

def isLibAdminUiIncluded()
{
    return new File( "$rootDir/../lib-admin-ui" ).exists()
}

def hasLibAdminUi()
{
    return hasEnvironment() && isLibAdminUiIncluded()
}

def hasFlushTask()
{
    return project.tasks.hasProperty( 'flush' )
}

if ( hasLibAdminUi() )
{
    def libAdminUi = gradle.includedBuild( 'lib-admin-ui' )

    ext {
        libAdminBuildTask = libAdminUi.task( ':build' )
        libAdminCleanTask = libAdminUi.task( ':clean' )
        libAdminFlushTask = libAdminUi.task( ':flush' )
    }
}

ext {
    hasLibAdminUi = this.&hasLibAdminUi as MethodClosure
    isLibAdminUiIncluded = this.&isLibAdminUiIncluded as MethodClosure
}

if ( !hasFlushTask() )
{
    tasks.register('flush', Delete) {
        dependsOn( 'clean' )
        description = 'Clean the project from built sources and dependencies'
        delete '.xp'
    }
}
