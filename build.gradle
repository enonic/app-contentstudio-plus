plugins {
    id 'java'
    id 'maven-publish'
    alias( libs.plugins.enonic.defaults )
    alias( libs.plugins.enonic.xp.app )
    alias( libs.plugins.node.gradle )
}

apply from: "$rootDir/gradle/env.gradle"
apply from: "$rootDir/gradle/lib-admin.gradle"
apply from: "$rootDir/gradle/lib-contentstudio.gradle"
apply from: "$rootDir/gradle/node.gradle"

subprojects {
    apply plugin: 'java'
    apply plugin: 'com.enonic.defaults'
    apply plugin: 'com.enonic.xp.base'
    apply from: "$rootDir/gradle/env.gradle"
    apply from: "$rootDir/gradle/node.gradle"
    apply from: "$rootDir/gradle/lib-admin.gradle"

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of( 21 )
        }

        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = sourceCompatibility
    }

    repositories {
        mavenLocal()
        mavenCentral()
        xp.enonicRepo( 'dev' )
    }
}

configurations {
    devResources {
        attributes {
            attribute( LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named( LibraryElements, 'dev-resources' ) )
        }
    }
}

app {
    name = "${group}.${projectName}"
    displayName = 'Content Studio +'
    vendorName = 'Enonic AS'
    vendorUrl = 'https://enonic.com'
    systemVersion = "${xpVersion}"
    devSourcePaths += file( "$rootDir/../lib-admin-ui/src/main/resources" )
    devSourcePaths += file( "$rootDir/../app-contentstudio/modules/lib/src/main/resources" )
}

dependencies {
    implementation "com.enonic.xp:core-api:${xpVersion}"
    include "com.enonic.xp:lib-admin:${xpVersion}"
    include "com.enonic.xp:lib-auth:${xpVersion}"
    include "com.enonic.xp:lib-content:${xpVersion}"
    include "com.enonic.xp:lib-context:${xpVersion}"
    include "com.enonic.xp:lib-i18n:${xpVersion}"
    include "com.enonic.xp:lib-io:${xpVersion}"
    include "com.enonic.xp:lib-portal:${xpVersion}"
    include libs.lib.mustache
    include libs.lib.license

    devResources "com.enonic.lib:lib-admin-ui:${libAdminUiVersion}"
    devResources "com.enonic.lib:lib-contentstudio:${libContentStudioVersion}"
}

repositories {
    mavenLocal()
    mavenCentral()
    xp.enonicRepo( 'dev' )
}

tasks.register( 'checkTypes', PnpmTask ) {
    dependsOn tasks.named( 'pnpmInstall' )
    group = 'verification'
    args = ['run', 'check:types']
    outputs.cacheIf { false }
}

tasks.register( 'checkLint', PnpmTask ) {
    dependsOn tasks.named( 'pnpmInstall' )
    group = 'verification'
    args = ['run', 'check:lint']
    outputs.cacheIf { false }
}

tasks.register( 'pnpmCheck', PnpmTask ) {
    dependsOn tasks.named( 'pnpmInstall' )
    group = 'verification'
    args = ['run', 'check']
    outputs.cacheIf { false }
}

tasks.named( 'check' ).configure {
    dependsOn tasks.named( 'pnpmCheck' )
}

tasks.register( 'pnpmBuild', PnpmTask ) {
    dependsOn tasks.named( 'pnpmInstall' )
    dependsOn tasks.named( 'javadoc' )
    description = 'Build UI resources (ts, css, etc) with Vite.'
    args = ['run', "build:${environmentShort()}"]
    inputs.dir '.xp/dev'
    inputs.dir 'src/main'
    inputs.file 'vite.config.ts'
    inputs.file 'tsconfig.json'
    outputs.dir "${buildDir}/resources/main"
}

tasks.named( 'processResources' ).configure {
    // Don't need source files
    exclude 'assets/js/**'
    exclude 'assets/styles/**'

    // Inlined by the Vite into CSS
    exclude 'assets/fonts/**'
    exclude 'assets/img/**'

    includeEmptyDirs = false
}

tasks.named( 'jar' ).configure {
    exclude 'assets/**/tsconfig.tsbuildinfo'

    if ( isProd() ) {
        exclude 'assets/**/*.map'
    }

    includeEmptyDirs = false

    dependsOn tasks.named( 'pnpmBuild' )
}

tasks.register( 'yolo' ) {
    description = 'Build without running install, check, or test tasks'

    dependsOn tasks.named( 'deploy' )
    dependsOn tasks.named( 'checkTypes' )

    nodeSetup.enabled = false
    npmSetup.enabled = false
    pnpmSetup.enabled = false
    pnpmCheck.enabled = false
    checkLint.enabled = false
    check.enabled = false
    test.enabled = false
}
