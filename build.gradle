plugins {
    id 'java'
    id 'maven-publish'
    id 'com.enonic.defaults' version '2.0.1'
    id 'com.enonic.xp.app' version '3.1.0'
    id "com.github.node-gradle.node" version '3.4.0'
}

apply from: "$rootDir/gradle/env.gradle"
apply from: "$rootDir/gradle/lib-admin.gradle"
apply from: "$rootDir/gradle/lib-contentstudio.gradle"
apply from: "$rootDir/gradle/node.gradle"

subprojects {
    apply plugin: 'java'
    apply plugin: 'com.enonic.defaults'
    apply plugin: 'com.enonic.xp.base'
    apply from: "$rootDir/gradle/env.gradle"
    apply from: "$rootDir/gradle/node.gradle"
    apply from: "$rootDir/gradle/lib-admin.gradle"

    repositories {
        mavenLocal()
        mavenCentral()
        xp.enonicRepo('dev')
    }
}

configurations {
    devResources {
        attributes {
            attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named(LibraryElements, 'dev-resources'))
        }
    }
}

app {
    name = project.appName
    displayName = 'Content Studio +'
    vendorName = 'Enonic AS'
    vendorUrl = 'https://enonic.com'
    systemVersion = "${xpVersion}"
    devSourcePaths += file("$rootDir/../lib-admin-ui/src/main/resources")
    devSourcePaths += file("$rootDir/../app-contentstudio/modules/lib/src/main/resources")
}

dependencies {
    include "com.enonic.xp:lib-content:${xpVersion}"
    include "com.enonic.xp:lib-context:${xpVersion}"
    include "com.enonic.xp:lib-portal:${xpVersion}"
    include "com.enonic.xp:lib-event:${xpVersion}"
    include "com.enonic.xp:lib-i18n:${xpVersion}"
    include "com.enonic.xp:lib-admin:${xpVersion}"
    include "com.enonic.lib:lib-admin-ui:${libAdminUiVersion}"
    include "com.enonic.lib:lib-contentstudio:${libContentStudioVersion}"
    include "com.enonic.lib:lib-mustache:${libMustacheVersion}"
    devResources "com.enonic.lib:lib-admin-ui:${libAdminUiVersion}"
    devResources "com.enonic.lib:lib-contentstudio:${libContentStudioVersion}"
}

repositories {
    mavenLocal()
    mavenCentral()
    xp.enonicRepo('dev')
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

node {
    download = true
    version = '16.15.0'
}

task copyDevResources {
    doLast {
        copy {
            from configurations.devResources.files.collect { zipTree( it ) }
            include 'dev/**'
            into '.xp'
        }
    }
}

npmInstall.dependsOn copyDevResources

task lint( type: NpmTask, dependsOn: npmInstall ) {
    args = [ 'run', 'lint:quiet' ]
    inputs.files fileTree( dir: 'modules', include: '**/src/main/**.*' )
    outputs.dir file('gradle')
    outputs.upToDateWhen { false }
}

task webpack( type: NpmTask, dependsOn: [npmInstall, lint] ) {
    environment = [ 'NODE_ENV': nodeEnvironment() ]
    description = 'Build UI resources (ts, css, etc).'
    args = [ 'run', 'build' ]
    inputs.dir '.xp/dev'
    inputs.dir 'src/main'
    inputs.file 'webpack.config.js'
    outputs.dir "${buildDir}/resources/main"
}

jar {
    exclude 'assets/**/*.ts'
    exclude 'assets/**/*.less'
    exclude 'assets/img/**'
    exclude 'assets/styles/html-editor.*'
    exclude 'assets/styles/contentlib.*'

    if (isProd()) {
        exclude 'assets/**/*.map'
    }

    outputs.dir "${buildDir}/resources/main"

    dependsOn webpack
}

def sourcePaths = "$projectDir/src/main/resources,$buildDir/resources/main".replaceAll( '\\\\',  '/' )
project.afterEvaluate {
    jar {
        bnd ( 'X-Source-Paths': sourcePaths )
    }
}

if ( hasEnvironment() )
{
    addBuildDependency()
}

def addBuildDependency() {
    if ( isLibAdminUiIncluded() )
    {
        copyDevResources.dependsOn += libAdminBuildTask
        build.dependsOn += libAdminBuildTask
        clean.dependsOn += libAdminCleanTask
        flush.dependsOn += libAdminFlushTask
    }

    if ( isLibContentStudioIncluded() )
    {
        copyDevResources.dependsOn += libContentStudioBuildTask
        build.dependsOn += libContentStudioBuildTask
        clean.dependsOn += libContentStudioCleanTask
        flush.dependsOn += libContentStudioFlushTask
    }
}
