import com.enonic.uitest.server.ServerInstance
import org.codehaus.groovy.runtime.GStringImpl

plugins {
    id 'java'
    id 'com.enonic.defaults'
    id 'com.github.node-gradle.node'
}
group = 'com.enonic.app.contentstudio.js_testing'

configurations {
    distro
    deploy
}

ext {
    unpackDir = "$buildDir/install" as GStringImpl
    distroDir = "$unpackDir/enonic-xp-generic-$xpVersion" as GStringImpl
    appDir = "$projectDir/test-applications" as GStringImpl
    seleniumDir = "$projectDir/test-applications/selenium" as GStringImpl
    xpHome = "$distroDir/home" as GStringImpl
    deployDir = "$xpHome/deploy" as GStringImpl
    licenseDir = "$xpHome/license" as GStringImpl
    configDir = "$xpHome/config" as GStringImpl
    xpServer = new ServerInstance()
    contentStudioFile = "$deployDir/contentstudio-${version}.jar" as GStringImpl
    contentStudioPlusFile = "$deployDir/contentstudio.plus-${version}.jar" as GStringImpl
    contentStudioPlusAppUrl = project.hasProperty('contentStudioPlusAppUrl') ? contentStudioPlusAppUrl : "file:///$projectDir/../build/libs/contentstudio.plus.jar" as GStringImpl
}

dependencies {
    distro "com.enonic.xp:enonic-xp-generic:$xpVersion@zip"
    deploy "com.enonic.app:contentstudio:$libContentStudioVersion@jar"
}

tasks.register('unpackDistro', Copy) {
    from {
        configurations.distro.collect { zipTree( it ) }
    }
    into file( unpackDir )
}

tasks.register('copyLicense', Copy) {
    doLast {
        println "Copy license"
    }
    from file (rootProject.projectDir)
    include 'enonic.platform.subscription.lic'
    into file( licenseDir )
    mustRunAfter unpackDistro
}

tasks.register('copyConfig', Copy) {
    doLast {
        println "$appDir${File.separator}common-config"
    }
    from "$appDir${File.separator}common-config"
    include '**.*.cfg'
    include '*.properties'
    into file( configDir )
    mustRunAfter unpackDistro
}

tasks.register('copyApps', Copy) {
    doLast {
        println '*********************************************************'
        println '* task started:copyApps  *'
        println '*********************************************************'
        println appDir
        println deployDir
    }
    from file( appDir )
    include '*.jar'
    into file( deployDir )
    mustRunAfter 'startServer'
}

tasks.register('deployContentStudio', Copy) {
    from {
        configurations.deploy
    }
    into file( deployDir )
    mustRunAfter unpackDistro
}

tasks.register('deployContentStudioPlus', DefaultTask) {
    outputs.files( contentStudioPlusFile )
    doLast {
        println 'Retrieving Content Studio Plus App from:'
        println contentStudioPlusAppUrl
        println 'Deploying to:'
        println contentStudioPlusFile

        def f = new File( contentStudioPlusFile )
        if ( !f.exists() )
        {
            new URL( contentStudioPlusAppUrl ).withInputStream { i -> f.withOutputStream { it << i } }
            println 'Content Studio Plus App is downloaded.'
        }
        else
        {
            println 'Content Studio Plus App already exists.'
        }
    }
    mustRunAfter unpackDistro
}


tasks.register('startServer') {
    dependsOn( unpackDistro, copyConfig, copyLicense, deployContentStudio, deployContentStudioPlus )
    doLast {
        xpServer.installDir = file( distroDir )
        xpServer.start()
    }
    mustRunAfter npmInstall
}

tasks.register('stopServer') {
    doLast {
        xpServer.stop()
    }
}

tasks.register('cleanup', Delete) {
    delete './build/reports/allure'
}

tasks.register('generateReportAndStopServer', NpmTask ) {
    args = ['run-script', 'allure-report']
    finalizedBy cleanup
    finalizedBy stopServer
}

tasks.register('w_testCSPlusChrome', NpmTask) {
    dependsOn( npmInstall, startServer, copyApps )
    args = ['run-script', 'test_cs_plus:wdio_chrome']
    finalizedBy generateReportAndStopServer
}

tasks.register('w_testAdminHomeChromeLocal', NpmTask) {
    dependsOn( npmInstall )
    args = ['run-script', 'test_cs_plus:wdio_chrome']
}
