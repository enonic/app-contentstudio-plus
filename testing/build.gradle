import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'java'
    id 'com.enonic.defaults'
    id 'com.github.node-gradle.node'
}
group = 'com.enonic.app.contentstudio.js_testing'

configurations {
    distro
    deploy
    apps {
        transitive false
    }
}

def unpackDir = layout.buildDirectory.dir("install").get()
def distroDir = unpackDir.dir("enonic-xp-generic-$xpVersion")
def appDir = "$projectDir/test-applications"
def xpHome = "$distroDir/home"
def deployDir = distroDir.dir("home/deploy")
def licenseDir = distroDir.dir("home/license")
def configDir = "$xpHome/config"
def contentStudioPlusFile = "$deployDir/contentstudio.plus-${version}.jar"
def contentStudioPlusAppUrl = project.hasProperty('contentStudioPlusAppUrl') ? contentStudioPlusAppUrl : "file:///$projectDir/../build/libs/contentstudio.plus.jar"

dependencies {
    distro "com.enonic.xp:enonic-xp-generic:$xpVersion@zip"
    deploy "com.enonic.app:contentstudio:$libContentStudioVersion@jar"
    apps "com.enonic.uitest:contenttypes:1.0.0-SNAPSHOT"
}

tasks.register( 'unpackDistro', Copy ) {
    from {
        configurations.distro.collect { zipTree( it ) }
    }
    into unpackDir
}

tasks.register('copyLicense', Copy) {
    doLast {
        println "Copy license"
    }
    from file (rootProject.projectDir)
    include 'enonic.platform.subscription.lic'
    into licenseDir
    mustRunAfter unpackDistro
}

tasks.register('copyConfig', Copy) {
    doLast {
        println "$appDir${File.separator}common-config"
    }
    from "$appDir${File.separator}common-config"
    include '**.*.cfg'
    include '*.properties'
    into configDir
    mustRunAfter unpackDistro
}
tasks.register( 'downloadApps', Copy ) {
    from {
        configurations.apps
    }
    into deployDir
    mustRunAfter unpackDistro
}

tasks.register('copyApps', Copy) {
    doLast {
        println '*********************************************************'
        println '* task started:copyApps  *'
        println '*********************************************************'
        println appDir
        println deployDir
    }
    from file( appDir )
    include '*.jar'
    into deployDir
    mustRunAfter unpackDistro
}

tasks.register('deployContentStudio', Copy) {
    from {
        configurations.deploy
    }
    into deployDir
    mustRunAfter unpackDistro
}

tasks.register('deployContentStudioPlus', DefaultTask) {
    outputs.files( contentStudioPlusFile )
    doLast {
        println 'Retrieving Content Studio Plus App from:'
        println contentStudioPlusAppUrl
        println 'Deploying to:'
        println contentStudioPlusFile

        def f = new File( contentStudioPlusFile )
        if ( !f.exists() )
        {
            new URL( contentStudioPlusAppUrl ).withInputStream { i -> f.withOutputStream { it << i } }
            println 'Content Studio Plus App is downloaded.'
        }
        else
        {
            println 'Content Studio Plus App already exists.'
        }
    }
    mustRunAfter unpackDistro
}


def process
tasks.register( 'startServer' ) {
    dependsOn( unpackDistro, copyConfig, copyLicense, deployContentStudio, deployContentStudioPlus, downloadApps )
    doLast {
        def pb
        if (DefaultNativePlatform.getCurrentOperatingSystem().windows) {
            pb = new ProcessBuilder('cmd', '/c', "${distroDir}\\bin\\server.bat")
        }
        else {
            pb = new ProcessBuilder("${distroDir}/bin/server.sh")
        }
        Map<String, String> env = pb.environment()
        env.put("XP_HOME", "${xpHome}".toString())

        def logsPath = layout.buildDirectory.dir("reports/logs").get()
        mkdir logsPath.asFile
        pb.redirectOutput(logsPath.file("xp.log").asFile)
        pb.redirectErrorStream(true)
        process = pb.start()
        sleep(90000)
    }
}


tasks.register( 'stopServer' ) {
    doLast {
        if (DefaultNativePlatform.getCurrentOperatingSystem().windows) {
            Runtime.getRuntime().exec("taskkill /F /T /PID " + process.pid());
        } else {
            process.destroy()
        }
    }
}

tasks.register('cleanup', Delete) {
    delete './build/reports/allure'
}

tasks.register('generateReportAndStopServer', NpmTask ) {
    args = ['run-script', 'allure-report']
    finalizedBy cleanup
    finalizedBy stopServer
}

tasks.register('w_testCSPlusChrome', NpmTask) {
    dependsOn( npmInstall, startServer )
    args = ['run-script', 'test_cs_plus:wdio_chrome']
    finalizedBy generateReportAndStopServer
}

tasks.register('w_testAdminHomeChromeLocal', NpmTask) {
    dependsOn( npmInstall )
    args = ['run-script', 'test_cs_plus:wdio_chrome']
}
