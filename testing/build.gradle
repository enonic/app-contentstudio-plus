import com.enonic.uitest.server.ServerInstance

plugins {
    id 'java'
    id 'com.enonic.defaults'
    id 'com.github.node-gradle.node'
}
group = 'com.enonic.app.contentstudio.js_testing'

configurations {
    distro
    deploy
}

ext {
    unpackDir = "$buildDir/install"
    distroDir = "$unpackDir/enonic-xp-generic-$xpVersion"
    appDir = "$projectDir/test-applications"
    seleniumDir = "$projectDir/test-applications/selenium"
    xpHome = "$distroDir/home"
    deployDir = "$xpHome/deploy"
    licenseDir = "$xpHome/license"
    configDir = "$xpHome/config"
    xpServer = new ServerInstance()
    contentStudioFile = "$deployDir/contentstudio-${version}.jar"
    contentStudioPlusFile = "$deployDir/contentstudio.plus-${version}.jar"
    contentStudioPlusAppUrl = project.hasProperty('contentStudioPlusAppUrl') ? contentStudioPlusAppUrl : "file:///$projectDir/../build/libs/contentstudio.plus.jar"
}

dependencies {
    distro "com.enonic.xp:enonic-xp-generic:$xpVersion@zip"
    deploy "com.enonic.app:contentstudio:$libContentStudioVersion@jar"
}

task unpackDistro( type: Copy ) {
    from {
        configurations.distro.collect { zipTree( it ) }
    }
    into file( unpackDir )
}

task copyLicense( type: Copy ) {
    doLast {
        println "Copy license"
    }
    from file (rootProject.projectDir)
    include 'enonic.platform.subscription.lic'
    into file( licenseDir )
    mustRunAfter unpackDistro
}

task copyConfig( type: Copy ) {
    doLast {
        println "$appDir${File.separator}common-config"
    }
    from "$appDir${File.separator}common-config"
    include '**.*.cfg'
    include '*.properties'
    into file( configDir )
    mustRunAfter unpackDistro
}

task copyApps( type: Copy ) {
    doLast {
        println '*********************************************************'
        println '* task started:copyApps  *'
        println '*********************************************************'
        println appDir
        println deployDir
    }
    from file( appDir )
    include '*.jar'
    into file( deployDir )
    mustRunAfter 'startServer'
}


task deployContentStudio( type: Copy ) {
    from {
        configurations.deploy
    }
    into file( deployDir )
    mustRunAfter unpackDistro
}

task deployContentStudioPlus( type: DefaultTask ) {
    outputs.files( contentStudioPlusFile )
    doLast {
        println 'Retrieving Content Studio Plus App from:'
        println contentStudioPlusAppUrl
        println 'Deploying to:'
        println contentStudioPlusFile

        def f = new File( contentStudioPlusFile )
        if ( !f.exists() )
        {
            new URL( contentStudioPlusAppUrl ).withInputStream { i -> f.withOutputStream { it << i } }
            println 'Content Studio Plus App is downloaded.'
        }
        else
        {
            println 'Content Studio Plus App already exists.'
        }
    }
    mustRunAfter unpackDistro
}


task startServer( dependsOn: [unpackDistro, copyConfig, copyLicense, deployContentStudio, deployContentStudioPlus] ) {
    doLast {
        xpServer.installDir = file( distroDir )
        xpServer.start()
    }
    mustRunAfter npmInstall
}

task stopServer {
    doLast {
        xpServer.stop()
    }
}

task testCSPlus( type: NpmTask, dependsOn: [npmInstall, startServer, copyApps] ) {
    args = ['run-script', 'test']
    finalizedBy stopServer
}

task testCSPlusLocal( type: NpmTask, dependsOn: [npmInstall] ) {
    args = ['run-script', 'test']
}
